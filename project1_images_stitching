from imutils import paths
import numpy as np
import argparse
import imutils
import cv2

ap = argparse.ArgumentParser()
ap.add_argument("-i", "--images", type=str, required=True,
	help="待输入路径")
ap.add_argument("-o", "--output", type=str, required=True,
	help="输出路径")
ap.add_argument("-c", "--crop", type=int, default=0,
	help="是否将output修剪成规则矩形")
args = vars(ap.parse_args())

# 初始化
print("loading...")
imagePaths = sorted(list(paths.list_images(args["images"])))
images = []

# 为适应任意张图片输入设置一个loop
for imagePath in imagePaths:
	image = cv2.imread(imagePath)
	images.append(image)

#拼接
print("[INFO] stitching images...")
stitcher = cv2.createStitcher() if imutils.is_cv3() else cv2.Stitcher_create()
(status, stitched) = stitcher.stitch(images)

# if the status is '0',则拼接成功
if status == 0:
	# 裁剪否？
	if args["crop"] > 0:
		# create a 10 pixel border surrounding the stitched image
		print("[INFO] cropping...")
		stitched = cv2.copyMakeBorder(stitched, 10, 10, 10, 10,
			cv2.BORDER_CONSTANT, (0, 0, 0))

		# 转灰度图
		gray = cv2.cvtColor(stitched, cv2.COLOR_BGR2GRAY)
		thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY)[1]

		# 确定轮廓
		cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,
			cv2.CHAIN_APPROX_SIMPLE)
		cnts = imutils.grab_contours(cnts)
		c = max(cnts, key=cv2.contourArea)

		mask = np.zeros(thresh.shape, dtype="uint8")
		(x, y, w, h) = cv2.boundingRect(c)
		cv2.rectangle(mask, (x, y), (x + w, y + h), 255, -1)


		minRect = mask.copy()
		sub = mask.copy()

		while cv2.countNonZero(sub) > 0:
			minRect = cv2.erode(minRect, None)
			sub = cv2.subtract(minRect, thresh)

		# 确定最大矩形框
		cnts = cv2.findContours(minRect.copy(), cv2.RETR_EXTERNAL,
			cv2.CHAIN_APPROX_SIMPLE)
		cnts = imutils.grab_contours(cnts)
		c = max(cnts, key=cv2.contourArea)
		(x, y, w, h) = cv2.boundingRect(c)

		# 用 bounding box 调整最终输出的图片
		stitched = stitched[y:y + h, x:x + w]

	# 写入硬盘
	cv2.imwrite(args["output"], stitched)

	# to display
	cv2.imshow("Stitched", stitched)
	cv2.waitKey(0)

else:
	print("[INFO] image stitching failed ({})".format(status))
